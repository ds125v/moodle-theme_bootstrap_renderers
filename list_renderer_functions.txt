./user/renderer.php:    public function user_files_tree() {
./user/renderer.php:    public function render_user_files_tree(user_files_tree $tree) {
./user/renderer.php:    public function __construct() {
./rss/renderer.php:    public function user_reset_rss_token_confirmation() {
./rss/renderer.php:    public function user_rss_token_box($token) {
./message/renderer.php:    public function manage_messageoutputs($processors) {
./message/renderer.php:    public function manage_defaultmessageoutputs($processors, $providers, $preferences) {
./message/renderer.php:    public function manage_messagingoptions($processors, $providers, $preferences, $defaultpreferences, $notificationsdisabled = false) {
./question/behaviour/interactive/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/behaviour/interactive/renderer.php:    public function feedback(question_attempt $qa, question_display_options $options) {
./question/behaviour/informationitem/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/behaviour/deferredcbm/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/behaviour/deferredcbm/renderer.php:    public function feedback(question_attempt $qa, question_display_options $options) {
./question/behaviour/immediatefeedback/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/behaviour/adaptive/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/behaviour/adaptive/renderer.php:    public function feedback(question_attempt $qa, question_display_options $options) {
./question/behaviour/missing/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/behaviour/immediatecbm/renderer.php:    public function controls(question_attempt $qa, question_display_options $options) {
./question/renderer.php:    public function qtype_icon($qtype) {
./question/type/match/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/match/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/match/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/ddmarker/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/ddmarker/renderer.php:    public function render_qtype_ddmarker_list(qtype_ddmarker_list_item $top) {
./question/type/ddmarker/renderer.php:    public function render_qtype_ddmarker_list_item(qtype_ddmarker_list_item $listitem) {
./question/type/ddmarker/renderer.php:    public function item(qtype_ddmarker_list_item $item) {
./question/type/multianswer/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/multianswer/renderer.php:    public function subquestion(question_attempt $qa,
./question/type/multianswer/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/multianswer/renderer.php:    abstract public function subquestion(question_attempt $qa,
./question/type/multianswer/renderer.php:    public function subquestion(question_attempt $qa, question_display_options $options,
./question/type/multianswer/renderer.php:    public function subquestion(question_attempt $qa, question_display_options $options,
./question/type/multianswer/renderer.php:    public function subquestion(question_attempt $qa, question_display_options $options,
./question/type/essay/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/essay/renderer.php:    public function files_read_only(question_attempt $qa, question_display_options $options) {
./question/type/essay/renderer.php:    public function files_input(question_attempt $qa, $numallowed,
./question/type/essay/renderer.php:    public function manual_comment(question_attempt $qa, question_display_options $options) {
./question/type/essay/renderer.php:    public function response_area_read_only($name, $qa, $step, $lines, $context) {
./question/type/essay/renderer.php:    public function response_area_input($name, $qa, $step, $lines, $context) {
./question/type/essay/renderer.php:    public function response_area_read_only($name, $qa, $step, $lines, $context) {
./question/type/essay/renderer.php:    public function response_area_input($name, $qa, $step, $lines, $context) {
./question/type/multichoice/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/multichoice/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/multichoice/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/multichoice/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/numerical/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/numerical/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/numerical/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/pmatch/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/pmatch/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/pmatch/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/pmatchjme/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/pmatchjme/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/description/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/description/renderer.php:    public function formulation_heading() {
./question/type/truefalse/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/truefalse/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/truefalse/renderer.php:    public function correct_response(question_attempt $qa) {
./question/type/shortanswer/renderer.php:    public function formulation_and_controls(question_attempt $qa,
./question/type/shortanswer/renderer.php:    public function specific_feedback(question_attempt $qa) {
./question/type/shortanswer/renderer.php:    public function correct_response(question_attempt $qa) {
./question/engine/renderer.php:    public function get_page() {
./question/engine/renderer.php:    public function question(question_attempt $qa, qbehaviour_renderer $behaviouroutput,
./blocks/settings/renderer.php:    public function settings_tree(settings_navigation $navigation) {
./blocks/settings/renderer.php:    public function search_form(moodle_url $formtarget, $searchvalue) {
./blocks/navigation/renderer.php:    public function navigation_tree(global_navigation $navigation, $expansionlimit, array $options = array()) {
./blocks/private_files/renderer.php:    public function private_files_tree() {
./blocks/private_files/renderer.php:    public function render_private_files_tree(private_files_tree $tree) {
./blocks/private_files/renderer.php:    public function __construct() {
./blocks/community/renderer.php:    public function restore_confirmation_box($filename, $context) {
./blocks/community/renderer.php:    public function remove_success(moodle_url $url) {
./blocks/community/renderer.php:    public function save_link_success(moodle_url $url) {
./blocks/community/renderer.php:    public function next_button($data) {
./blocks/community/renderer.php:    public function course_list($courses, $huburl, $contextcourseid) {
./webservice/renderer.php:    public function admin_authorised_user_selector(&$options) {
./webservice/renderer.php:    public function admin_authorised_user_list($users, $serviceid) {
./webservice/renderer.php:    public function admin_remove_service_function_confirmation($function, $service) {
./webservice/renderer.php:    public function admin_remove_service_confirmation($service) {
./webservice/renderer.php:    public function admin_delete_token_confirmation($token) {
./webservice/renderer.php:    public function admin_service_function_list($functions, $service) {
./webservice/renderer.php:    public function user_reset_token_confirmation($token) {
./webservice/renderer.php:    public function user_webservice_tokens_box($tokens, $userid, $documentation = false) {
./webservice/renderer.php:    public function detailed_description_html($params) {
./webservice/renderer.php:    public function description_in_indented_xml_format($returndescription, $indentation = "") {
./webservice/renderer.php:    public function xmlrpc_param_description_html($paramdescription, $indentation = "") {
./webservice/renderer.php:    public function colored_box_with_pre_tag($title, $content, $rgb = 'FEEBE5') {
./webservice/renderer.php:    public function rest_param_description_html($paramdescription, $paramstring) {
./webservice/renderer.php:    public function documentation_html($functions, $printableformat, $activatedprotocol,
./backup/util/ui/renderer.php:    public function progress_bar(array $items) {
./backup/util/ui/renderer.php:    public function dependency_notification($message) {
./backup/util/ui/renderer.php:    public function backup_details($details, $nextstageurl) {
./backup/util/ui/renderer.php:    public function backup_details_nonstandard($nextstageurl, array $details) {
./backup/util/ui/renderer.php:    public function backup_details_unknown(moodle_url $nextstageurl) {
./backup/util/ui/renderer.php:    public function course_selector(moodle_url $nextstageurl, $wholecourse = true, restore_category_search $categories = null, restore_course_search $courses=null, $currentcourse = null) {
./backup/util/ui/renderer.php:    public function import_course_selector(moodle_url $nextstageurl, import_course_search $courses=null) {
./backup/util/ui/renderer.php:    public function precheck_notices($results) {
./backup/util/ui/renderer.php:    public function substage_buttons($haserrors) {
./backup/util/ui/renderer.php:    public function role_mappings($rolemappings, $roles) {
./backup/util/ui/renderer.php:    public function continue_button($url, $method='post') {
./backup/util/ui/renderer.php:    public function backup_files_viewer(array $options = null) {
./backup/util/ui/renderer.php:    public function render_backup_files_viewer(backup_files_viewer $viewer) {
./backup/util/ui/renderer.php:    public function render_restore_course_search(restore_course_search $component) {
./backup/util/ui/renderer.php:    public function render_import_course_search(import_course_search $component) {
./backup/util/ui/renderer.php:    public function render_restore_category_search(restore_category_search $component) {
./backup/util/ui/renderer.php:    public function __construct(array $options = null) {
./mod/assignment/renderer.php:    public function assignment_files($context, $itemid, $filearea='submission') {
./mod/assignment/renderer.php:    public function render_assignment_files(assignment_files $tree) {
./mod/assignment/renderer.php:    public function __construct($context, $itemid, $filearea='submission') {
./mod/assignment/renderer.php:    public function preprocess($dir, $filearea) {
./mod/assign/renderer.php:    public function assign_files(context $context, $userid, $filearea, $component) {
./mod/assign/renderer.php:    public function render_assign_files(assign_files $tree) {
./mod/assign/renderer.php:    public function render_assign_quickgrading_result(assign_quickgrading_result $result) {
./mod/assign/renderer.php:    public function render_assign_form(assign_form $form) {
./mod/assign/renderer.php:    public function render_assign_user_summary(assign_user_summary $summary) {
./mod/assign/renderer.php:    public function render_assign_submit_for_grading_page($page) {
./mod/assign/renderer.php:    public function render_footer() {
./mod/assign/renderer.php:    public function render_assign_header(assign_header $header) {
./mod/assign/renderer.php:    public function render_assign_grading_summary(assign_grading_summary $summary) {
./mod/assign/renderer.php:    public function render_assign_feedback_status(assign_feedback_status $status) {
./mod/assign/renderer.php:    public function render_assign_submission_status(assign_submission_status $status) {
./mod/assign/renderer.php:    public function render_assign_submission_plugin_submission(assign_submission_plugin_submission $submissionplugin) {
./mod/assign/renderer.php:    public function render_assign_grading_table(assign_grading_table $table) {
./mod/assign/renderer.php:    public function render_assign_feedback_plugin_feedback(assign_feedback_plugin_feedback $feedbackplugin) {
./mod/forum/renderer.php:    public function subscriber_selection_form(user_selector_base $existinguc, user_selector_base $potentialuc) {
./mod/forum/renderer.php:    public function subscriber_overview($users, $forum , $course) {
./mod/forum/renderer.php:    public function subscribed_users(user_selector_base $existingusers) {
./mod/adobeconnect/renderer.php:    public function display_meeting_detail ($meetingdetail, $cmid, $groupid = 0) {
./mod/workshop/renderer.php:    public function perpage_selector($current=10) {
./mod/choice/renderer.php:    public function display_options($options, $coursemoduleid, $vertical = false) {
./mod/choice/renderer.php:    public function display_result($choices, $forcepublish = false) {
./mod/choice/renderer.php:    public function display_publish_name_vertical($choices) {
./mod/choice/renderer.php:    public function display_publish_anonymous_vertical($choices) {
./mod/choice/renderer.php:    public function display_publish_anonymous_horizontal($choices) {
./mod/quiz/renderer.php:    public function review_page(quiz_attempt $attemptobj, $slots, $page, $showall,
./mod/quiz/renderer.php:    public function review_question_page(quiz_attempt $attemptobj, $slot, $seq,
./mod/quiz/renderer.php:    public function review_question_not_allowed($message) {
./mod/quiz/renderer.php:    public function review_summary_table($summarydata, $page) {
./mod/quiz/renderer.php:    public function questions(quiz_attempt $attemptobj, $reviewing, $slots, $page, $showall,
./mod/quiz/renderer.php:    public function review_form($page, $showall, $displayoptions, $content, $attemptobj) {
./mod/quiz/renderer.php:    public function finish_review_link($url) {
./mod/quiz/renderer.php:    public function review_next_navigation(quiz_attempt $attemptobj, $page, $lastpage) {
./mod/quiz/renderer.php:    public function countdown_timer(quiz_attempt $attemptobj, $timenow) {
./mod/quiz/renderer.php:    public function restart_preview_button($url) {
./mod/quiz/renderer.php:    public function navigation_panel(quiz_nav_panel_base $panel) {
./mod/quiz/renderer.php:    public function start_attempt_page(quiz $quizobj, mod_quiz_preflight_check_form $mform) {
./mod/quiz/renderer.php:    public function attempt_page($attemptobj, $page, $accessmanager, $messages, $slots, $id,
./mod/quiz/renderer.php:    public function quiz_notices($messages) {
./mod/quiz/renderer.php:    public function attempt_form($attemptobj, $page, $slots, $id, $nextpage) {
./mod/quiz/renderer.php:    public function initialise_timer($timerstartvalue) {
./mod/quiz/renderer.php:    public function close_attempt_popup($url, $message = '') {
./mod/quiz/renderer.php:    public function access_messages($messages) {
./mod/quiz/renderer.php:    public function summary_page($attemptobj, $displayoptions) {
./mod/quiz/renderer.php:    public function summary_table($attemptobj, $displayoptions) {
./mod/quiz/renderer.php:    public function summary_page_controls($attemptobj) {
./mod/quiz/renderer.php:    public function view_page($course, $quiz, $cm, $context, $viewobj) {
./mod/quiz/renderer.php:    public function view_page_buttons(mod_quiz_view_object $viewobj) {
./mod/quiz/renderer.php:    public function start_attempt_button($buttontext, moodle_url $url,
./mod/quiz/renderer.php:    public function no_questions_message($canedit, $editurl) {
./mod/quiz/renderer.php:    public function view_page_guest($course, $quiz, $cm, $context, $messages) {
./mod/quiz/renderer.php:    public function view_page_notenrolled($course, $quiz, $cm, $context, $messages) {
./mod/quiz/renderer.php:    public function view_information($quiz, $cm, $context, $messages) {
./mod/quiz/renderer.php:    public function quiz_intro($quiz, $cm) {
./mod/quiz/renderer.php:    public function view_table_heading() {
./mod/quiz/renderer.php:    public function view_table($quiz, $context, $viewobj) {
./mod/quiz/renderer.php:    public function attempt_state($attemptobj) {
./mod/quiz/renderer.php:    public function view_best_score($viewobj) {
./mod/quiz/renderer.php:    public function view_result_info($quiz, $context, $cm, $viewobj) {
./mod/quiz/renderer.php:    public function review_link($url, $reviewinpopup, $popupoptions) {
./mod/quiz/renderer.php:    public function no_review_message($message) {
./mod/quiz/renderer.php:    public function quiz_attempt_summary_link_to_reports($quiz, $cm, $context,
./mod/quiz/renderer.php:    public function graph(moodle_url $url, $title) {
./mod/folder/renderer.php:    public function folder_tree($folder, $cm, $course) {
./mod/folder/renderer.php:    public function render_folder_tree(folder_tree $tree) {
./mod/folder/renderer.php:    public function __construct($folder, $cm, $course) {
./mod/data/renderer.php:    public function import_setting_mappings($datamodule, data_preset_importer $importer) {
./mod/wiki/renderer.php:    public function page_index() {
./mod/wiki/renderer.php:    public function search_result($records, $subwiki) {
./mod/wiki/renderer.php:    public function diff($pageid, $old, $new, $options = array()) {
./mod/wiki/renderer.php:    public function diff_paging_bar($minpage, $maxpage, $page, $baseurl, $pagevar = 'page', $nocurr = false) {
./mod/wiki/renderer.php:    public function wiki_info() {
./mod/wiki/renderer.php:    public function tabs($page, $tabitems, $options) {
./mod/wiki/renderer.php:    public function prettyview_link($page) {
./mod/wiki/renderer.php:    public function wiki_print_subwiki_selector($wiki, $subwiki, $page, $pagetype = 'view') {
./mod/wiki/renderer.php:    public function wiki_files_tree($context, $subwiki) {
./mod/wiki/renderer.php:    public function render_wiki_files_tree(wiki_files_tree $tree) {
./mod/wiki/renderer.php:    public function __construct($context, $subwiki) {
./mod/lesson/renderer.php:    public function header($lesson, $cm, $currenttab = '', $extraeditbuttons = false, $lessonpageid = null) {
./mod/lesson/renderer.php:    public function footer() {
./mod/lesson/renderer.php:    public function lesson_inaccessible($message) {
./mod/lesson/renderer.php:    public function login_prompt(lesson $lesson, $failedattempt = false) {
./mod/lesson/renderer.php:    public function dependancy_errors($dependentlesson, $errors) {
./mod/lesson/renderer.php:    public function message($message, single_button $button = null) {
./mod/lesson/renderer.php:    public function continue_links(lesson $lesson, $lastpageseenid) {
./mod/lesson/renderer.php:    public function display_page(lesson $lesson, lesson_page $page, $attempt) {
./mod/lesson/renderer.php:    public function display_edit_collapsed(lesson $lesson, $pageid) {
./mod/lesson/renderer.php:    public function display_edit_full(lesson $lesson, $pageid, $prevpageid, $single=false) {
./mod/lesson/renderer.php:    public function add_page_links(lesson $lesson, $prevpageid=false) {
./mod/lesson/renderer.php:    public function add_first_page_links(lesson $lesson) {
./mod/lesson/renderer.php:    public function page_action_links(lesson_page $page, $printmove, $printaddpage=false) {
./mod/lesson/renderer.php:    public function ongoing_score(lesson $lesson) {
./mod/lesson/renderer.php:    public function progress_bar(lesson $lesson) {
./mod/lesson/renderer.php:    public function slideshow_start(lesson $lesson) {
./mod/lesson/renderer.php:    public function slideshow_end() {
./mod/lesson/renderer.php:    public function paragraph($contents, $class='') {
./mod/lesson/renderer.php:    public function add_highscores_form(lesson $lesson) {
./enrol/renderer.php:    public function user_roles_and_actions($userid, $roles, $assignableroles, $canassign, $pageurl) {
./enrol/renderer.php:    public function user_groups_and_actions($userid, $groups, $allgroups, $canmanagegroups, $pageurl) {
./enrol/renderer.php:    public function user_enrolments_and_actions($enrolments) {
./enrol/renderer.php:    public function __construct(course_enrolment_manager $manager) {
./enrol/renderer.php:    public function get_manual_enrol_buttons() {
./enrol/renderer.php:    public function get_field_sort_direction($field) {
./enrol/renderer.php:    public function set_fields($fields, $output) {
./enrol/renderer.php:    public function set_total_users($totalusers) {
./enrol/renderer.php:    public function set_users(array $users) {
./enrol/renderer.php:    public function initialise_javascript() {
./enrol/renderer.php:    public function get_paging_bar() {
./enrol/renderer.php:    public function get_url_params() {
./enrol/renderer.php:    public function get_combined_url_params() {
./enrol/renderer.php:    public function set_bulk_user_enrolment_operations(array $bulkoperations) {
./enrol/renderer.php:    public function get_bulk_user_enrolment_operations() {
./enrol/renderer.php:    public function has_bulk_user_enrolment_operations() {
./enrol/renderer.php:    public function get_enrolment_type_filter() {
./enrol/renderer.php:    public function __construct(course_enrolment_manager $manager) {
./enrol/renderer.php:    public function get_user_search_button() {
./course/renderer.php:    public function __construct(moodle_page $page, $target) {
./course/renderer.php:    public function course_category_tree(array $structure) {
./course/renderer.php:    public function course_modchooser($modules, $course) {
./course/format/renderer.php:    public function section_title($section, $course) {
./course/format/renderer.php:    public function print_single_section_page($course, $sections, $mods, $modnames, $modnamesused, $displaysection) {
./course/format/renderer.php:    public function print_multiple_section_page($course, $sections, $mods, $modnames, $modnamesused) {
./course/publish/renderer.php:    public function publicationselector($courseid) {
./course/publish/renderer.php:    public function registeredonhublisting($courseid, $publications) {
./course/publish/renderer.php:    public function confirmunpublishing($publication) {
./course/publish/renderer.php:    public function sendingbackupinfo($backupfile) {
./course/publish/renderer.php:    public function sentbackupinfo($id, $huburl, $hubname) {
./course/publish/renderer.php:    public function hubinfo($hubinfo) {
./grade/report/user/renderer.php:    public function graded_users_selector($report, $course, $userid, $groupid, $includeall) {
./grade/report/overview/renderer.php:    public function graded_users_selector($report, $course, $userid, $groupid, $includeall) {
./grade/grading/renderer.php:    public function management_method_selector(grading_manager $manager, moodle_url $targeturl) {
./grade/grading/renderer.php:    public function management_action_icon(moodle_url $url, $text, $icon) {
./grade/grading/renderer.php:    public function management_message($message) {
./grade/grading/renderer.php:    public function pick_action_icon(moodle_url $url, $text, $icon = '', $class = '') {
./grade/grading/form/rubric/renderer.php:    public function criterion_template($mode, $options, $elementname = '{NAME}', $criterion = null, $levelsstr = '{LEVELS}', $value = null) {
./grade/grading/form/rubric/renderer.php:    public function level_template($mode, $options, $elementname = '{NAME}', $criterionid = '{CRITERION-id}', $level = null) {
./grade/grading/form/rubric/renderer.php:    public function display_rubric($criteria, $options, $mode, $elementname = null, $values = null) {
./grade/grading/form/rubric/renderer.php:    public function display_instances($instances, $defaultcontent, $cangrade) {
./grade/grading/form/rubric/renderer.php:    public function display_instance(gradingform_rubric_instance $instance, $idx, $cangrade) {
./grade/grading/form/rubric/renderer.php:    public function display_regrade_confirmation($elementname, $changelevel, $value) {
./grade/grading/form/rubric/renderer.php:    public function display_rubric_mapping_explained($scores) {
./grade/grading/form/guide/renderer.php:    public function criterion_template($mode, $options, $elementname = '{NAME}', $criterion = null, $value = null,
./grade/grading/form/guide/renderer.php:    public function comment_template($mode, $elementname = '{NAME}', $comment = null) {
./grade/grading/form/guide/renderer.php:    public function display_guide($criteria, $comments, $options, $mode, $elementname = null, $values = null,
./grade/grading/form/guide/renderer.php:    public function display_instances($instances, $defaultcontent, $cangrade) {
./grade/grading/form/guide/renderer.php:    public function display_instance(gradingform_guide_instance $instance, $idx, $cangrade) {
./grade/grading/form/guide/renderer.php:    public function display_regrade_confirmation($elementname, $changelevel, $value) {
./grade/grading/form/guide/renderer.php:    public function display_guide_mapping_explained($scores) {
./files/renderer.php:    public function files_tree_viewer(file_info $file_info, array $options = null) {
./files/renderer.php:    public function render_files_tree_viewer(files_tree_viewer $tree) {
./files/renderer.php:    public function render_form_filemanager($fm) {
./files/renderer.php:    public function filemanager_js_templates() {
./files/renderer.php:    public function filepicker_js_templates() {
./files/renderer.php:    public function repository_default_searchform() {
./files/renderer.php:    public function __construct(file_info $file_info, array $options = null) {
./admin/tool/assignmentupgrade/renderer.php:    public function index_page($detected, array $actions) {
./admin/tool/assignmentupgrade/renderer.php:    public function simple_message_page($message) {
./admin/tool/assignmentupgrade/renderer.php:    public function confirm_batch_operation_page(stdClass $data) {
./admin/tool/assignmentupgrade/renderer.php:    public function render_tool_assignmentupgrade_batchoperationconfirm(tool_assignmentupgrade_batchoperationconfirm $confirm) {
./admin/tool/assignmentupgrade/renderer.php:    public function assignment_list_page(tool_assignmentupgrade_assignments_table $assignments, tool_assignmentupgrade_batchoperations_form $batchform, tool_assignmentupgrade_pagination_form $paginationform) {
./admin/tool/assignmentupgrade/renderer.php:    public function convert_assignment_result($assignmentsummary, $success, $log) {
./admin/tool/assignmentupgrade/renderer.php:    public function convert_assignment_are_you_sure($assignmentsummary) {
./admin/tool/assignmentupgrade/renderer.php:    public function end_of_page_link($url, $text) {
./admin/tool/assignmentupgrade/renderer.php:    public function back_to_index() {
./admin/tool/qeupgradehelper/renderer.php:    public function index_page($detected, array $actions) {
./admin/tool/qeupgradehelper/renderer.php:    public function simple_message_page($message) {
./admin/tool/qeupgradehelper/renderer.php:    public function quiz_list_page(tool_qeupgradehelper_quiz_list $quizzes,
./admin/tool/qeupgradehelper/renderer.php:    public function convert_quiz_are_you_sure($quizsummary) {
./admin/tool/qeupgradehelper/renderer.php:    public function reset_quiz_are_you_sure($quizsummary) {
./admin/tool/qeupgradehelper/renderer.php:    public function end_of_page_link($url, $text) {
./admin/tool/qeupgradehelper/renderer.php:    public function back_to_index() {
./admin/renderer.php:    public function install_licence_page() {
./admin/renderer.php:    public function upgrade_stale_php_files_page() {
./admin/renderer.php:    public function install_environment_page($maturity, $envstatus, $environment_results, $release) {
./admin/renderer.php:    public function unsatisfied_dependencies_page($version, array $failed, moodle_url $reloadurl) {
./admin/renderer.php:    public function upgrade_confirm_page($strnewversion, $maturity) {
./admin/renderer.php:    public function upgrade_environment_page($release, $envstatus, $environment_results) {
./admin/renderer.php:    public function upgrade_plugin_check_page(plugin_manager $pluginman, available_update_checker $checker,
./admin/renderer.php:    public function admin_notifications_page($maturity, $insecuredataroot, $errorsdisplayed,
./admin/renderer.php:    public function plugin_management_page(plugin_manager $pluginman, available_update_checker $checker) {
./admin/renderer.php:    public function environment_check_page($versions, $version, $envstatus, $environment_results) {
./admin/renderer.php:    public function cron_overdue_warning($cronoverdue) {
./admin/renderer.php:    public function db_problems($dbproblems) {
./admin/renderer.php:    public function maintenance_mode_warning($maintenancemode) {
./admin/renderer.php:    public function plugins_check_table(plugin_manager $pluginman, $version, array $options = array()) {
./admin/renderer.php:    public function plugins_overview_panel(plugin_manager $pluginman) {
./admin/renderer.php:    public function plugins_control_panel(plugin_manager $pluginman) {
./admin/renderer.php:    public function environment_check_table($result, $environment_results) {
./admin/registration/renderer.php:    public function moodleorg_registration_message() {
./admin/registration/renderer.php:    public function registration_confirmation($confirmationmessage) {
./admin/registration/renderer.php:    public function registeredonhublisting($hubs) {
./calendar/renderer.php:    public function basic_export_form($allowthisweek, $allownextweek, $allownextmonth, $userid, $authtoken) {
./calendar/renderer.php:    public function start_layout() {
./calendar/renderer.php:    public function complete_layout() {
./calendar/renderer.php:    public function fake_block_filters($courseid, $day, $month, $year, $view, $courses) {
./calendar/renderer.php:    public function fake_block_threemonths(calendar_information $calendar) {
./calendar/renderer.php:    public function add_pretend_calendar_block(block_contents $bc, $pos=BLOCK_POS_RIGHT) {
./calendar/renderer.php:    public function show_day(calendar_information $calendar, moodle_url $returnurl = null) {
./calendar/renderer.php:    public function event(calendar_event $event, $showactions=true) {
./calendar/renderer.php:    public function show_month_detailed(calendar_information $calendar, moodle_url $returnurl  = null) {
./calendar/renderer.php:    public function show_upcoming_events(calendar_information $calendar, $futuredays, $maxevents, moodle_url $returnurl = null) {
